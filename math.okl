/*
 * Math kernels file
 */

@kernel void set_to_value(DType *u, DType alpha, int n, int offset)
{
    for (int i = 0; i < n; i++; @tile(BLOCK_SIZE, @outer, @inner))
    {
        u[i + offset] = alpha;
    }
}

@kernel void invert_vector_elements(DType *u, int n)
{
    for (int i = 0; i < n; i++; @tile(128, @outer, @inner))
    {
        u[i] = 1.0 / u[i];
    }
}

@kernel void vector_vector_addition(DType *uv, const DType alpha, const DType *u, const DType beta, const DType *v, const int n)
{
    for (int i = 0; i < n; i++; @tile(128, @outer, @inner))
    {
        uv[i] = alpha * u[i] + beta * v[i];
    }
}

@kernel void vector_scaling(DType *au, const DType alpha, const DType *u, const int n)
{
    for (int i = 0; i < n; i++; @tile(128, @outer, @inner))
    {
        au[i] = alpha * u[i];
    }
}
