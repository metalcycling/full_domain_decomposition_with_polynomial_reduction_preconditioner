/*
 * Subdomain kernels file
 */
@kernel void stiffness_matrix_1(DType **GDu, const DType *u, const DType **D_hat_ptr, const int *offset, const int *vert, const int *level, const DType **G, const int num_points)
{
    for (int idx = 0; idx < num_points; idx++; @tile(BLOCK_SIZE, @outer, @inner))
    {
        POLY_DEGREE;

        int o = offset[idx];
        int v = vert[idx];
        int l = level[idx];
        int n_x = poly_degree[l] + 1;
        int n_xy = n_x * n_x;
        const DType *D_hat = D_hat_ptr[l];

#if DIM == 2
        int i = v % n_x;
        int j = v / n_x;

        DType Du_1 = 0.0;
        DType Du_2 = 0.0;

        for (int k = 0; k < n_x; k++)
        {
            Du_1 += D_hat[k + i * n_x] * u[o + (k + j * n_x)];
            Du_2 += D_hat[k + j * n_x] * u[o + (i + k * n_x)];
        }

        GDu[0][idx] = G[0][idx] * Du_1 + G[2][idx] * Du_2;
        GDu[1][idx] = G[2][idx] * Du_1 + G[1][idx] * Du_2;
#else
        int i = v % n_x;
        int j = (v / n_x) % n_x;
        int k = v / n_xy;

        DType Du_1 = 0.0;
        DType Du_2 = 0.0;
        DType Du_3 = 0.0;

        for (int p = 0; p < n_x; p++)
        {
            Du_1 += D_hat[p + i * n_x] * u[o + (p + j * n_x + k * n_xy)];
            Du_2 += D_hat[p + j * n_x] * u[o + (i + p * n_x + k * n_xy)];
            Du_3 += D_hat[p + k * n_x] * u[o + (i + j * n_x + p * n_xy)];
        }

        GDu[0][idx] = G[0][idx] * Du_1 + G[3][idx] * Du_2 + G[4][idx] * Du_3;
        GDu[1][idx] = G[3][idx] * Du_1 + G[1][idx] * Du_2 + G[5][idx] * Du_3;
        GDu[2][idx] = G[4][idx] * Du_1 + G[5][idx] * Du_2 + G[2][idx] * Du_3;
#endif
    }
}

@kernel void stiffness_matrix_2(DType *Au, const DType **GDu, const DType **D_hat_ptr, const int *offset, const int *vert, const int *level, const int num_points)
{
    for (int idx = 0; idx < num_points; idx++; @tile(BLOCK_SIZE, @outer, @inner))
    {
        POLY_DEGREE;

        int o = offset[idx];
        int v = vert[idx];
        int l = level[idx];
        int n_x = poly_degree[l] + 1;
        int n_xy = n_x * n_x;
        const DType *D_hat = D_hat_ptr[l];

#if DIM == 2
        int i = v % n_x;
        int j = v / n_x;

        DType Au_1 = 0.0;
        DType Au_2 = 0.0;

        for (int k = 0; k < n_x; k++)
        {
            Au_1 += D_hat[i + k * n_x] * GDu[0][o + (k + j * n_x)];
            Au_2 += D_hat[j + k * n_x] * GDu[1][o + (i + k * n_x)];
        }

        Au[idx] = Au_1 + Au_2;
#else
        int i = v % n_x;
        int j = (v / n_x) % n_x;
        int k = v / n_xy;

        DType Au_1 = 0.0;
        DType Au_2 = 0.0;
        DType Au_3 = 0.0;

        for (int p = 0; p < n_x; p++)
        {
            Au_1 += D_hat[i + p * n_x] * GDu[0][o + (p + j * n_x + k * n_xy)];
            Au_2 += D_hat[j + p * n_x] * GDu[1][o + (i + p * n_x + k * n_xy)];
            Au_3 += D_hat[k + p * n_x] * GDu[2][o + (i + j * n_x + p * n_xy)];
        }

        Au[idx] = Au_1 + Au_2 + Au_3;
#endif
    }
}

@kernel void inner_product(DType *block, const DType *u, const DType *v, const int num_values, const int num_blocks)
{
    for (int group = 0; group < num_blocks; ++group; @outer)
    {
        @shared DType uv[BLOCK_SIZE];

        for (int item = 0; item < BLOCK_SIZE; ++item; @inner)
        {
            int idx = group * BLOCK_SIZE + item;

            if (idx < num_values)
                uv[item] = u[idx] * v[idx];
            else
                uv[item] = 0.0;
        }

        for (int alive = ((BLOCK_SIZE + 1) / 2); 0 < alive; alive /= 2)
        {
            for (int item = 0; item < BLOCK_SIZE; ++item; @inner)
            {
                if (item < alive) uv[item] += uv[item + alive];
            }
        }

        for (int item = 0; item < BLOCK_SIZE; ++item; @inner)
        {
            if (item == 0) block[group] = uv[0];
        }
    }
}

@kernel void weighted_inner_product(DType *block, const DType *u, const DType *v, const DType *w, const int num_values, const int num_blocks)
{
    for (int group = 0; group < num_blocks; ++group; @outer)
    {
        @shared DType uv[BLOCK_SIZE];

        for (int item = 0; item < BLOCK_SIZE; ++item; @inner)
        {
            int idx = group * BLOCK_SIZE + item;

            if (idx < num_values)
                uv[item] = u[idx] * v[idx] * w[idx];
            else
                uv[item] = 0.0;
        }

        for (int alive = ((BLOCK_SIZE + 1) / 2); 0 < alive; alive /= 2)
        {
            for (int item = 0; item < BLOCK_SIZE; ++item; @inner)
            {
                if (item < alive) uv[item] += uv[item + alive];
            }
        }

        for (int item = 0; item < BLOCK_SIZE; ++item; @inner)
        {
            if (item == 0) block[group] = uv[0];
        }
    }
}

@kernel void projection_inner_products(DType *block, const DType *z_k, const DType *r_k, const DType *p_k, const DType *q_k, const DType *weight, const int num_values, const int num_blocks)
{
    for (int group = 0; group < num_blocks; ++group; @outer)
    {
        @shared DType gamma_sum[BLOCK_SIZE];
        @shared DType theta_sum[BLOCK_SIZE];

        for (int item = 0; item < BLOCK_SIZE; ++item; @inner)
        {
            int idx = group * BLOCK_SIZE + item;

            if (idx < num_values)
            {
                gamma_sum[item] = z_k[idx] * r_k[idx] * weight[idx];
                theta_sum[item] = p_k[idx] * q_k[idx] * weight[idx];
            }
            else
            {
                gamma_sum[item] = 0.0;
                theta_sum[item] = 0.0;
            }
        }

        for (int alive = ((BLOCK_SIZE + 1) / 2); 0 < alive; alive /= 2)
        {
            for (int item = 0; item < BLOCK_SIZE; ++item; @inner)
            {
                if (item < alive)
                {
                    gamma_sum[item] += gamma_sum[item + alive];
                    theta_sum[item] += theta_sum[item + alive];
                }
            }
        }

        for (int item = 0; item < BLOCK_SIZE; ++item; @inner)
        {
            if (item == 0)
            {
                block[group] = gamma_sum[0];
                block[group + num_blocks] = theta_sum[0];
            }
        }
    }
}

@kernel void initialize_arrays(DType *u_k, DType *r_k, const DType *f, const int num_values)
{
    for (int idx = 0; idx < num_values; idx++; @tile(BLOCK_SIZE, @outer, @inner))
    {
        u_k[idx] = 0.0;
        r_k[idx] = f[idx];
    }
}

@kernel void solution_and_residual_update(DType *u_k, DType *r_kp1, const DType *r_k, const DType *p_k, const DType *q_k, const DType alpha_k, const int num_values)
{
    for (int idx = 0; idx < num_values; idx++; @tile(BLOCK_SIZE, @outer, @inner))
    {
        u_k[idx] += alpha_k * p_k[idx];
        r_kp1[idx] = r_k[idx] - alpha_k * q_k[idx];
    }
}

@kernel void search_update_inner_product(DType *block, const DType *r_k, const DType *r_kp1, const DType *z_k, const DType *weight, const int num_points, const int num_blocks)
{
    for (int group = 0; group < num_blocks; ++group; @outer)
    {
        @shared DType theta_sum[BLOCK_SIZE];

        for (int item = 0; item < BLOCK_SIZE; ++item; @inner)
        {
            int idx = group * BLOCK_SIZE + item;

            if (idx < num_points)
                theta_sum[item] = (r_kp1[idx] - r_k[idx]) * z_k[idx] * weight[idx];
            else
                theta_sum[item] = 0.0;
        }

        for (int alive = ((BLOCK_SIZE + 1) / 2); 0 < alive; alive /= 2)
        {
            for (int item = 0; item < BLOCK_SIZE; ++item; @inner)
            {
                if (item < alive) theta_sum[item] += theta_sum[item + alive];
            }
        }

        for (int item = 0; item < BLOCK_SIZE; ++item; @inner)
        {
            if (item == 0) block[group] = theta_sum[0];
        }
    }
}
@kernel void residual_and_search_update(DType *p_k, DType *r_k, const DType *z_k, const DType *r_kp1, const DType beta_k, const int num_values)
{
    for (int idx = 0; idx < num_values; idx++; @tile(BLOCK_SIZE, @outer, @inner))
    {
        p_k[idx] = z_k[idx] + beta_k * p_k[idx];
        r_k[idx] = r_kp1[idx];
    }
}

@kernel void copy_from_domain_data(DType *u, const EType *v, const int num_points)
{
    for (int idx = 0; idx < num_points; idx++; @tile(BLOCK_SIZE, @outer, @inner))
    {
        u[idx] = DType(v[idx]);
    }
}

@kernel void copy_to_domain_data(EType *u, const DType *v, const int num_points)
{
    for (int idx = 0; idx < num_points; idx++; @tile(BLOCK_SIZE, @outer, @inner))
    {
        u[idx] = EType(v[idx]);
    }
}

@kernel void restriction_1(DType *Ju, const DType *J_cf, const DType *u, const int num_points, const int n_f, const int n_c)
{
    for (int idx = 0; idx < num_points; idx++; @tile(BLOCK_SIZE, @outer, @inner))
    {
        int num_elem_points_fine   = (DIM == 2) ? n_f * n_f : n_f * n_f * n_f;
        int num_elem_points_coarse = (DIM == 2) ? n_f * n_c : n_f * n_f * n_c;

        int e = idx / num_elem_points_coarse;
        int v = idx % num_elem_points_coarse;

        DType Ju_ij = 0.0;

#if DIM == 2
        int i = v % n_f;
        int j = v / n_f;

        for (int k = 0; k < n_f; k++) Ju_ij += J_cf[j + k * n_c] * u[(i + k * n_f) + e * num_elem_points_fine];

        Ju[(i + j * n_f) + e * num_elem_points_coarse] = Ju_ij;
#else
        int i = v % n_c;
        int j = (v / n_c) % n_f;
        int k = v / (n_c * n_f);

        for (int l = 0; l < n_f; l++) Ju_ij += J_cf[i + l * n_c] * u[(l + j * n_f + k * (n_f * n_f)) + e * num_elem_points_fine];

        Ju[(i + j * n_c + k * (n_c * n_f)) + e * num_elem_points_coarse] = Ju_ij;
#endif
    }
}

@kernel void restriction_2(DType *Ju, const DType *J_cf, const DType *u, const int num_points, const int n_f, const int n_c)
{
    for (int idx = 0; idx < num_points; idx++; @tile(BLOCK_SIZE, @outer, @inner))
    {
        int num_elem_points_fine   = (DIM == 2) ? n_f * n_c : n_f * n_f * n_c;
        int num_elem_points_coarse = (DIM == 2) ? n_c * n_c : n_f * n_c * n_c;

        int e = idx / num_elem_points_coarse;
        int v = idx % num_elem_points_coarse;

        DType Ju_ij = 0.0;

#if DIM == 2
        int i = v % n_c;
        int j = v / n_c;

        for (int k = 0; k < n_f; k++) Ju_ij += u[(j * n_f + k) + e * num_elem_points_fine] * J_cf[k * n_c + i];

        Ju[(i + j * n_c) + e * num_elem_points_coarse] = Ju_ij;
#else
        int i = v % n_c;
        int j = (v / n_c) % n_c;
        int k = v / (n_c * n_c);

        for (int l = 0; l < n_f; l++) Ju_ij += J_cf[j + l * n_c] * u[(i + l * n_c + k * (n_c * n_f)) + e * num_elem_points_fine];

        Ju[(i + j * n_c + k * (n_c * n_c)) + e * num_elem_points_coarse] = Ju_ij;
#endif
    }
}

@kernel void restriction_3(DType *Ju, const DType *J_cf, const DType *u, const int num_points, const int n_f, const int n_c)
{
    for (int idx = 0; idx < num_points; idx++; @tile(BLOCK_SIZE, @outer, @inner))
    {
        int num_elem_points_fine   = n_f * n_c * n_c;
        int num_elem_points_coarse = n_c * n_c * n_c;

        int e = idx / num_elem_points_coarse;
        int v = idx % num_elem_points_coarse;

        DType Ju_ij = 0.0;

        int i = v % n_c;
        int j = (v / n_c) % n_c;
        int k = v / (n_c * n_c);

        for (int l = 0; l < n_f; l++) Ju_ij += J_cf[k + l * n_c] * u[(i + j * n_c + l * (n_c * n_c)) + e * num_elem_points_fine];

        Ju[(i + j * n_c + k * (n_c * n_c)) + e * num_elem_points_coarse] = Ju_ij;
    }
}
